@model ViewModel


<div>
    <h1 class="helloWorld">Personal Finance App - Dashboard</h1>
</div>
<br />
<br />
<br />

<div class="row" style="margin: 0 auto;">
    <div class="col-md-4">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">TOTALE TRANSAZIONI</div>
            <div class="card-body">
                <h4 class="card-title">Saldo attuale: @Model.TransactionSum €</h4>
                <p class="card-text">Nella tabella a lato vengono riportate le entrate/uscite fisse mensili.<br /></p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">TOTALE CREDITI</div>
            <div class="card-body">
                <h4 class="card-title">Totale crediti: @Model.CreditSum €</h4>
                <p class="card-text">Nella tabella a lato vengono riportate le entrate/uscite fisse mensili.<br /></p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">TOTALE DEBITI</div>
            <div class="card-body">
                <h4 class="card-title">Totale debiti: @Model.DebitSum €</h4>
                <p class="card-text">Nella tabella a lato vengono riportate le entrate/uscite fisse mensili.<br /></p>
            </div>
        </div>
    </div>
</div>
<div class="row" style="margin: 0 auto;">
    <div class="col-md-6">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">TOTALE + CREDITI - DEBITI</div>
            <div class="card-body">
                <h4 class="card-title">Saldo totale: @Model.TotWithDebits €</h4>
                <p class="card-text">Nella tabella a lato vengono riportate le entrate/uscite fisse mensili.<br /></p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">TOTALE + CREDITI</div>
            <div class="card-body">
                <h4 class="card-title">Saldo totale: @Model.TotNoDebits €</h4>
                <p class="card-text">Nella tabella a lato vengono riportate le entrate/uscite fisse mensili.<br /></p>
            </div>
        </div>
    </div>
</div>







<div class="row" style="margin: 0 auto;">
    <div class="col-md-7">
        <div class="card shadow p-3 border-dark mb-3" style="margin: 0 auto;">
            <div class="card-header">GRAFICO</div>
            <div class="card-body">
                <canvas id="canvas"></canvas>
            </div>
        </div>
    </div>
</div>








<script type="text/javascript">
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {

        var items = @Html.Raw(ViewBag.Transactions);
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Data'); //se riesci a farlo diventare date, saranno spaziati come periodi diversi
        data.addColumn('number', '€');
           var n = 0;

        for (i = 0; i < items.length; i++) {
            str = items[i].BalDateTime;
            var strDay = str. //converti giorno, mese e anno
            str = str.substring(0, str.indexOf('T'))
            data.addRows([
                [str, items[i].TrsValue]
            ]);

             }
        /*     var currentDate = items[1].TrsDateTime;

             var date = currentDate.getDate();
             var month = currentDate.getMonth(); //Be careful! January is 0 not 1
             var year = currentDate.getFullYear();
             /*
             for (i = 0; i < items.length; {
             data.addRows([
                 [items[i].TrsDateTime, n + 1]
             ]);
     [new Date(2012, 6, 13), 23]
             }

     */






        var options = {
            'title': 'Saldo',
            'height': 500,
            'backgroundColor': '#22262e',
            'hAxis': {
                'title': 'Data',
                'textStyle': {
                    'color': '#FFF'
                }
            },
            'chartArea': {
                'backgroundColor': '#447799'
            },


            'vAxis': {
                format: 'currency',
                'title': 'Saldo',
                'gridlines': {
                'color': '#3d3e3e'
                },
                'textStyle': {
                'color': '#FFF'
                }
            },
            'animation': {
                duration: 1000,
                startup: true
            },
            'colors': ['#6f9654']
        };


        var container = document.getElementById("chart_div");
        var chart = new google.visualization.AreaChart(container);

        google.visualization.events.addListener(chart, 'ready', function () {
            var observer = new MutationObserver(function () {
                container.getElementsByTagName('svg')[0].setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                Array.prototype.forEach.call(container.getElementsByTagName('path'), function (path) {
                    if (path.getAttribute('fill') === '#447799') {
                        path.setAttribute('fill', 'url(#my-gradient) #447799');
                    }
                });
            });
            observer.observe(container, {
                childList: true,
                subtree: true
            });
        });






        chart.draw(data, options);

    }


</script>
<!--

    <script src="~/js/drawBasic.js"></script>
   // <script>drawBasic('') </script>
    <div id="chart_div"></div>
-->
<div class="wrapper">


</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js" integrity="sha512-rmZcZsyhe0/MAjquhTgiUcb4d9knaFc7b5xAfju483gbEXTkeJRUMIPk6s3ySZMYUHEcjKbjLjyddGWMrNEvZg==" crossorigin="anonymous"></script>
<script src='https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js'></script>
<script>


    const colors = {
        purple: {
            default: "rgba(37, 150, 190, 1)",
            half: "rgba(37, 150, 190, 0.5)",
            quarter: "rgba(37, 150, 190, 0.25)",
            zero: "rgba(37, 150, 190, 0)"
        },
        indigo: {
            default: "rgba(80, 102, 120, 1)",
            quarter: "rgba(80, 102, 120, 0.25)"
        }
    };
    var i = 0;

    var items = @Html.Raw(ViewBag.Balances);
    var values = new Array(items.length);
    var strDate = new Array(items.length);
    for (i = 0; i < items.length; i++) {
        strDate[i] = items[i].BalDateTime;
        values[i] = items[i].ActBalance;
     //   strDate[i] = strDate[i].substring(0, strDate[i].indexOf('T'))
    }
   /* const weight = [60.0, 60.2, 59.1, 61.4, 59.9, 60.2, 59.8, 58.6, 59.6, 59.2];

 */  const labels = [
        "Week 1",
        "Week 2",
        "Week 3",
        "Week 4",
        "Week 5",
        "Week 6",
        "Week 7",
        "Week 8",
        "Week 9",
        "Week 10"
    ];

    const ctx = document.getElementById("canvas").getContext("2d");
    ctx.canvas.height = 100;

    gradient = ctx.createLinearGradient(0, 25, 0, 300);
    gradient.addColorStop(0, colors.purple.half);
    gradient.addColorStop(0.35, colors.purple.quarter);
    gradient.addColorStop(1, colors.purple.zero);

    const options = {
        type: "line",
        data: {
            labels: strDate,
            datasets: [
                {
                    fill: true,
                    backgroundColor: gradient,
                    pointBackgroundColor: colors.purple.default,
                    borderColor: colors.purple.default,
                    data: values,
                    lineTension: 0.2,
                    borderWidth: 2,
                    pointRadius: 3
                }
            ]
        },
        options: {
            layout: {
                padding: 10
            },
            responsive: true,
            legend: {
                display: false
            },
            scales: {
                xAxes: [
                    {
                        type: 'time',
                        time: {
                            unit: 'day'
                        },
                        //distribution: 'series',
                        display: true,
                        title: {
                            display: true,
                            text: 'Date'
                        },
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            padding: 10,
                            autoSkip: false,
                            maxRotation: 15,
                            minRotation: 15
                        }
                    }
                ],
                yAxes: [
                    {
                        scaleLabel: {
                            display: true,
                            labelString: "Saldo in €",
                            padding: 10
                        },
                        gridLines: {
                            display: true,
                            color: colors.indigo.quarter
                        },
                        ticks: {
                            beginAtZero: false,
                     //       max: 63,
                      //      min: 57,
                            padding: 10
                        }
                    }
                ]
            }
        }
    };

    window.onload = function () {
        window.myLine = new Chart(ctx, options);
        Chart.defaults.global.defaultFontColor = colors.indigo.default;
        //Chart.defaults.global.defaultFontFamily = "Fira Sans";
    };

</script>